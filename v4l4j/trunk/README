Video4Linux4Java (v4l4j) is a GPL'd java package providing a simple interface
to capture JPEG-encoded frames  from Video4Linux devices. It consists of:
- a v4l library (libv4l), which is a C wrapper library around the V4L API,
- a set of java classes that provide access to the libv4l API, and
- a JNI stub, which fills in the gap between JAVA and libv4l.

FEATURES:
- Captured frames handed out as JPEG images in a Bytebuffer object
- Single frame or stream capture
- Access to all V4L video source controls, even those accessible
  only through private ioctls, which are exposed as (pseudo-) controls.
  See TestedHardware in the libv4l directory for a list of detected drivers
  and exported private ioctls

REQUIREMENTS:
v4l4j requires the following:
- a supported V4L video source (webcam, capture card, tuner card). In addition,
  v4l4j only supports JPEG, MJPEG, YUV420, YUYV and RGB24 palette formats.
- Sun JAVA JDK 1.6 (it wont compile with earlier versions)
- the development files of libjpeg, as well as libjpeg itself
- Apache Ant

COMPILING:
To compile the JNI library and java classes, run "ant all" in the top-level
directory. This will first compile libv4l and the JNI code, and then link both
of these to produce the JNI library libv4l4j. It will then compile the java 
classes and pack them in a JAR file. Both the JNI library libv4l4j.so and the
JAR file v4l4j.jar are copied in the top-level directory.

INSTALLING:
In order to use the v4l4j package from your java application, you must do
two things:
FIRST, make sure JNI library libv4l4j.so can be loaded by the JVM. This is done
by EITHER:
- installing libv4l4j.so in the JRE lib directory. This is achieved by running
  "ant install-jnilib" as root in the top-level directory. It can be
  uninstalled with "ant uninstall-jnilib" as root later on.
OR
- setting the shell variable LD_LIBRARY_PATH to point to the directory where
  libv4l4j.so resides before running your program. By default, libv4l4j.so
  is created in the top-level directory. For example:
  LD_LIBRARY_PATH=path/to/libv4l4j_dir java my.package.MyApp
  The same can be achieved by setting the java.library.path property using:
  "-Djava.library.path=path/to/libv4l4j_dir" when invoking the JVM.

SECOND, make sure v4l4j.jar is in your application's classpath.

TESTING:
you can either run a series of Junit tests or an FPS test:
- to run the Junit tests, run "ant test-junit"
- to run the FPS test, run "ant test-fps".
By default, both tests will capture frames from /dev/video0, at 320x240 and the
device is assumed to be a webcam. You can change any of these settings by
editing the values at the end of the "build.properties" file, or provide those
values on the ant command line ("-Dtest.device=...", to change the device file,
"-Dtest.width=.." the change the width, "-Dtest.height=..." for the height and
so on).

DEBUGGING:
You can compile both the wrapper library libv4l and v4l4j with extra debug
output:
uncomment the #DEBUG line in libv4l/Makefile, in src/Makefile and recompile. 
In addition, troubleshooting can be done using the test programs in libv4l/.
Check the README file in libv4l/

CONTACT:
Feedback is is greatly appreciated, specially because v4l4j has only been 
tested with a very limited number of webcams and capture cards.
Issues and queries can be emailed to djails@users.sf.net along with a
description of what went wrong and what hardware you run v4l4j on.



