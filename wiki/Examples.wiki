#summary Examples of video capture using v4l4j.
#labels Featured

This page shows a few examples in Java on how to use v4l4j. It assumes you have successfully compiled and installed v4l4j (see GettingStarted page for detailed instructions). Here, video source refers to any video-capture device supported by the Linux kernel, and accessible through the Video4Linux API using the associated device file. Typical capture devices include USB webcams and capture cards (with S-Video, composite or TV tuner inputs).
 * *Initialising the video device*: Creating a java object to interact with a video device.
 * *Dealing with controls*: List the controls associated with a video device and get / set their values.
 * *Capturing frames*: Getting a `FrameGrabber` object to capture images from the video device.
 * *Display video in a GUI (JFrame)*: Create a graphical interface (JFrame) to display the captured video stream.
Suggestions for more examples are welcome.

= Initialising the video device =
All interactions with a video device are done using a `VideoDevice` object. To instantiate one, you simply needs its device file:
{{{
String dev = "/dev/video0";
VideoDevice vd = new VideoDevice(dev);
}}}
The VideoDevice object allows you to:
  * get textual information about the video device itself, such as its name, the supported image formats, and the type of video inputs,
  * capture frames through a `FrameGrabber` object,
  * control tuners the device may have, through the `TunerList` object,
  * access video control, such as brightness, contrast, and gain, through the `ControlList` object.

*Once the `VideoDevice` is no longer needed, you must release resources and free data structures by calling the `release()` method:*
{{{
vd.release();
}}}

= Capturing frames =
A `FrameGrabber` object gives you access to the frame capture facility. There a two types of frame grabbers: raw and jpeg. Raw frame grabbers will capture a frame and hand it in straight away in its raw format. Jpeg frame grabbers will capture a frame and jpeg-encode it before hading it in. JPEG frame grabbers can only be used with video devices supporting pre-defined image formats that can be jpeg-encoded. In its current release, jpeg encoding is possible only with video sources supporting one of JPEG, MJPEG, YUV420, YUYV, YVYU or RGB24 formats. You can check whether a video device supports JPEG-encoding by calling:
{{{
VideoDevice vd = new VideoDevice("/dev/video0");
if(!vd.canJPEGEncode()){
  vd.release();
  throw new Exception("The video device does not support JPEG encoding");
}
}}}
Frame grabber constructors need at least 4 arguments:
 * the desired capture resolution in pixels - width and height. Setting them to `FrameGrabber.MAX_WIDTH` and `FrameGrabber.MAX_HEIGHT` will request the best supported resolution.
 * the input channel, this depends on the hardware, webcams have only 1 input (0), capture cards can have many,
 * the video standard (`FrameGrabber.WEBCAM`, `FrameGrabber.PAL`, `FrameGrabber.SECAM`, `FrameGrabber.NTSC`)

Before instantiating a raw frame grabber, you must check what image formats are supported, and pass the desired one to the constructor:
{{{
FrameGrabber fg;
int width = 640, height = 480, input = 0, standard = V4L4JConstants.PAL;
for(ImageFormat imf: vd.getDeviceInfo().getFormats()){
  if(imf.getName().equals("YUYV")
    fg = vd.getRawFrameGrabber(width, height, input, channel, imf);
}
if(fg == null)
  throw new Exception("YUYV format not supported");

...

vd.releaseFrameGrabber();
}}}
Alternatively, you can use:
{{{
fg = vd.getRawFrameGrabber(width, height, input, channel);
}}}
This will use the first supported image format, as returned by:
{{{
vd.getDeviceInfo.getFormats().get(0);
}}}

A JPEG frame grabber is instantiated by calling:
{{{
FrameGrabber fg;
int width = 640, height = 480, input = 1, standard = V4L4JConstants.PAL, quality = 80;
fg = vd.getJPEGFrameGrabber(width, height, input, channel, quality);

...

vd.releaseFrameGrabber();
}}}
The `quality` argument is the JPEG compression parameter (between 0 and 100 inclusive), the lower the value, the lower the picture quality. The previous code creates a jpeg `FrameGrabber` object. The requested capture resolution is 640x480, from input 1 using PAL video standard and a JPEG compression factor of 80.

Note that the requested capture resolution given in the constructor is simply an indication and can be adjusted by V4L to the closest resolution supported by the video device. The actual width and height that will be used can be retrieved using:
{{{
int actualWidth = f.getwidth();
int actualHeight = f.getHeight();
}}}

When the `FrameGrabber` is no longer used, resources must be released by calling
{{{
vd.releaseFrameGrabber();
}}}

= Dealing with controls =
Once the `VideoDevice` is intialised, a call to `getControlList()` will return a `ControlList` object. This object encapsulates (among other things) a `List<Control>` accessible through the `getList()` method. The following code loops over all controls and prints their name, range of acceptable values, and current value.
{{{
List<Control> controls = vd.getControlsList().getList();
for(Control c: controls)
 System.out.println("control name: "+c.getName()+" - min: "+c.getMin()+" - max: "+c.getMax()+" - step: "+c.getStep()+" - value: "+c.getValue());
vd.releaseControlList();
}}}
Resetting the Pan angle on a Logitech Quickcam Sphere can be done using:
{{{
vd.getControlList().getControl("Pan Reset").setValue(1);
}}}
*Once again, when the `ControlList` is no longer needed, it MUST be released by calling `releaseControlList()` on the `VideoDevice`.*

= Display video in a GUI (JFrame) =
Assuming the `FrameGrabber` object `f` has been successfully initialised, to start capturing JPEG-encoded frames, do the following:
{{{
ByteBuffer b;
int stop=0;
f.startCapture();
while(!stop) {
 b = f.getFrame();
 //do something useful with b
 //the captured frame size is returned by calling b.limit()
}
f.stopCapture()
//dont forget to call f.remove() when done with f
}
}}}

The following example shows you how to capture JPEG-encoded frames from your video device and display them in a JFrame object.
{{{
package v4l4jTest;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.nio.ByteBuffer;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

import au.edu.jcu.v4l4j.FrameGrabber;
import au.edu.jcu.v4l4j.exceptions.V4L4JException;

public class Viewer extends WindowAdapter implements Runnable {
	private VideoDevice vd;
	private JLabel l;
	private JFrame f;
	private long start = 0;
	private int n;
	private FrameGrabber fg;
	private Thread captureThread;
	private boolean stop;
	
	/**
	 * Builds a WebcamViewer object
	 * @param dev the video device file to capture from
	 * @param w the desired capture width
	 * @param h the desired capture height
	 * @param std the capture standard
	 * @param channel the capture channel
	 * @param qty the JPEG compression quality
	 * @throws V4L4JException if any parameter if invalid
	 */
    public Viewer(String dev, int w, int h, int std, int channel, int qty) throws V4L4JException{
        initFrameGrabber(dev, w, h, std, channel, qty);
        initGUI();
        stop = false;
        captureThread = new Thread(this, "Capture Thread");
        captureThread.start();
    }
    
    /** 
     * Creates the graphical interface components and initialises them
     */
    private void initGUI(){
        f = new JFrame();
        l = new JLabel();
        f.getContentPane().add(l);
        f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        f.addWindowListener(this);
        f.setVisible(true);
        f.setSize(fg.getWidth(), fg.getHeight());    	
    }
    
    /**
     * Initialises the FrameGrabber object with the given parameters
	 * @param dev the video device file to capture from
	 * @param w the desired capture width
	 * @param h the desired capture height
	 * @param std the capture standard
	 * @param channel the capture channel
	 * @param qty the JPEG compression quality
	 * @throws V4L4JException if any parameter if invalid
     */
    private void initFrameGrabber(String dev, int w, int h, int std, int channel, int qty) throws V4L4JException{
	vd = new VideoDevice(dev)
	fg = vd.getJPEGFrameGrabber(w, h, channel, std, qty);
	fg.startCapture();
	System.out.println("Starting capture at "+fg.getWidth()+"x"+fg.getHeight());	    	
    }
    
    /**
     * Updates the image shown in the JLabel
     * @param b
     */
    public void setImage(byte[] b) {
    	l.setIcon(new ImageIcon(b));
    }
    
    /**
     * Implements the capture thread: get a frame from the FrameGrabber, and display it
     */
    public void run(){
	ByteBuffer bb;
	byte[] b;
	try {			
		while(!stop){
			bb = fg.getFrame();
			b = new byte[bb.limit()];
			bb.get(b);
			setImage(b);
		}
	} catch (V4L4JException e) {
		e.printStackTrace();
		System.out.println("Failed to capture image");
	}
    }

    /**
     * Catch window closing event so we can free up resources before exiting
     * @param e
     */
	public void windowClosing(WindowEvent e) {
		if(captureThread.isAlive()){
    			stop = true;
    			try {
				captureThread.join();
			} catch (InterruptedException e1) {}
    		}
		
		fg.stopCapture();
		vd.releaseFrameGrabber();
		
    		f.dispose();		
	}
	
	

	public static void main(String[] args) throws V4L4JException, IOException {

		String dev = "/dev/video0";
		int w=FrameGrabber.MAX_WIDTH, h=FrameGrabber.MAX_HEIGHT, std=FrameGrabber.WEBCAM, channel = 0, qty = 60;

		new Viewer(dev,w,h,std,channel,qty);
	}
}

}}}